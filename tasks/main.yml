---

- name: Gather router facts
  when: kubernetes_ansible_router_group is defined
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups[kubernetes_ansible_router_group] }}"

- name: Deploy ServiceAccount for kube-dns to cluster
  local_action:
    module:  k8s
    state: "{{ kube_dns_state }}"
    kubeconfig: "{{ kube_dns_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: coredns
        namespace: kube-system

- name: Deploy ClusterRole for kube-dns to cluster
  local_action:
    module:  k8s
    state: "{{ kube_dns_state }}"
    kubeconfig: "{{ kube_dns_kubeconfig }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:coredns
      rules:
        - apiGroups:
            - ""
          resources:
            - endpoints
            - services
            - pods
            - namespaces
          verbs:
            - list
            - watch
        - apiGroups: [ "discovery.k8s.io" ]
          resources:
            - endpointslices
          verbs:
            - watch
            - list
        - apiGroups:
            - ""
          resources:
            - nodes
          verbs:
            - get
        - apiGroups:
            - discovery.k8s.io
          resources:
            - endpointslices
          verbs:
            - list
            - watch

- name: Deploy ClusterRoleBinding for kube-dns to cluster
  local_action:
    module:  k8s
    state: "{{ kube_dns_state }}"
    kubeconfig: "{{ kube_dns_kubeconfig }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:coredns
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:coredns
      subjects:
        - kind: ServiceAccount
          name: coredns
          namespace: kube-system

- name: Deploy ConfigMap for kube-dns to cluster
  local_action:
    module:  k8s
    state: "{{ kube_dns_state }}"
    kubeconfig: "{{ kube_dns_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: coredns
        namespace: kube-system
      data:
        Corefile: |
          .:53 {
              errors
              health
              kubernetes {{ kubernetes_cluster_domain }} in-addr.arpa ip6.arpa {
                pods insecure
                fallthrough in-addr.arpa ip6.arpa
              }
              prometheus :9153
              {% if kubernetes_manual_upstream_ips == [] %}
              forward . {% for router in groups[kubernetes_ansible_router_group] %}{{ hostvars[router]['ansible_all_ipv4_addresses'] | ipaddr('private') | join(' ') }} {% endfor %}
              {% else %}
              forward . {% for upstream in kubernetes_manual_upstream_ips %}{{ upstream }} {% endfor %}
              {% endif %}

              cache 30
              loop
              reload
              loadbalance
          }

- name: Deploy Deployment for kube-dns to cluster
  local_action:
    module:  k8s
    state: "{{ kube_dns_state }}"
    kubeconfig: "{{ kube_dns_kubeconfig }}"
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: coredns
        namespace: kube-system
        labels:
          k8s-app: kube-dns
          kubernetes.io/name: "CoreDNS"
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: k8s-app
                      operator: In
                      values:
                        - kube-dns
                topologyKey: "kubernetes.io/hostname"
        replicas: 2
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 1
        selector:
          matchLabels:
            k8s-app: kube-dns
        template:
          metadata:
            labels:
              k8s-app: kube-dns
          spec:
            priorityClassName: system-cluster-critical
            serviceAccountName: coredns
            tolerations:
              - key: "CriticalAddonsOnly"
                operator: "Exists"
            nodeSelector:
              beta.kubernetes.io/os: linux
            containers:
              - name: coredns
                image: "coredns/coredns:{{ kube_dns_coredns_version }}"
                imagePullPolicy: IfNotPresent
                resources:
                  limits:
                    memory: 170Mi
                  requests:
                    cpu: 100m
                    memory: 70Mi
                args: [ "-conf", "/etc/coredns/Corefile" ]
                volumeMounts:
                  - name: config-volume
                    mountPath: /etc/coredns
                    readOnly: true
                ports:
                  - containerPort: 53
                    name: dns
                    protocol: UDP
                  - containerPort: 53
                    name: dns-tcp
                    protocol: TCP
                  - containerPort: 9153
                    name: metrics
                    protocol: TCP
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    add:
                      - NET_BIND_SERVICE
                    drop:
                      - all
                    readOnlyRootFilesystem: true
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8080
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 8080
                    scheme: HTTP
                dnsPolicy: Default
            volumes:
              - name: config-volume
                configMap:
                  name: coredns
                  items:
                    - key: Corefile
                      path: Corefile

- name: Deploy Service for kube-dns to cluster
  local_action:
    module:  k8s
    state: "{{ kube_dns_state }}"
    kubeconfig: "{{ kube_dns_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: kube-dns
        namespace: kube-system
        annotations:
          prometheus.io/port: "9153"
          prometheus.io/scrape: "true"
        labels:
          k8s-app: kube-dns
          kubernetes.io/cluster-service: "true"
          kubernetes.io/name: "CoreDNS"
      spec:
        selector:
          k8s-app: kube-dns
        clusterIP: "{{ kubernetes_dns_service_ip }}"
        ports:
          - name: dns
            port: 53
            protocol: UDP
          - name: dns-tcp
            port: 53
            protocol: TCP
          - name: metrics
            port: 9153
            protocol: TCP

